---
title: "Guide de démarrage du hackathon SOCSTAT"
---

::: {.callout-note}
## English version

This is the French version of the starting guide.

To see the English version, [click here](/en/index.qmd)
:::

Ce site centralise les contenus techniques utiles pour
participer au _hackathon_.

La vidéo de présentation de l'environnement technique
est disponible [ici](XXXX). Les _slides_ associées
sont disponibles [ici](XXXX). 

## Environnement disponible

::: {.panel-tabset group="language"}

## `Python` {.unnumbered .unlisted}

Les _packages_ nécessaires pour répliquer les exemples
proposés dans ce guide.

```{.python filename= "Installer les packages nécessaires"}
pip install pandas geopandas pyreadstat
```

## `R` {.unnumbered .unlisted}

```{.r filename="Installer les packages nécessaires"}
install.packages(c("haven", "readr", "ggplot2", "sf", "archive"))
```

:::

## Télécharger les données

Les données sont téléchargeables par
le biais du lien fourni en amont du _hackathon_. 

::: {.callout-important}
## Rappel

A l'issue du _hackathon_,
les participants se sont engagés à supprimer toute copie de la base de données
qu'ils auraient pu faire.
:::


## Importer les données du recensement agricole

Une fois celles-ci téléchargées, il est possible de les
importer avec `Python` ou `R`. L'import met quelques
minutes, la base étant assez volumineuse. 

::: {.panel-tabset group="language"}

## `Python` {.unnumbered .unlisted}

```{.python filename = "Importer les données"}
import pandas as pd
recensement = pd.read_spss('recensement_decrypted.sav')
```

## `R` {.unnumbered .unlisted}

```{.r filename = "Importer les données"}
library(haven)
recensement = read_sav("recensement_decrypted.sav")
```


:::


## Importer le dictionnaire des variables du recensement agricole

Le dictionnaire des variables est le suivant:

```{ojs}
//| echo: false
viewof search = Inputs.search(base)
```

```{ojs}
//| echo: false
Inputs.table(search)
```

Il peut également être récupéré dans une session `Python`
ou `R`

::: {.panel-tabset group="language"}

## `Python` {.unnumbered .unlisted}

Celui-ci est également lisible par le biais de `Python`
directement depuis le fichier:

```{.python filename = "Importer le dictionnaire des variables"}
import pyreadstat
import pandas as pd

pd.set_option('display.width', 1000)

df, meta = pyreadstat.read_sav("recensement.sav")
documentation = pd.DataFrame(list(meta.column_names_to_labels.items()), columns=['variable', 'description'])
documentation.to_csv("dico.csv")
```


```{.python filename="Télécharger les données"}
import pandas as pd
meta = pd.read_csv("dico.csv")
meta.head(4)
```

Ce dictionnaire des variables est également disponible
par le biais de l'URL [https://minio.lab.sspcloud.fr/projet-hackathon-socstat/metadata/dico.csv](https://minio.lab.sspcloud.fr/projet-hackathon-socstat/metadata/dico.csv)


## `R` {.unnumbered .unlisted}

Le dictionnaire des variables a été mis à disposition en amont sous forme CSV.
Celui-ci est lisible ainsi: 

```{.r filename="Importer le dictionnaire des variables"}
library(readr)
meta = read_csv("https://minio.lab.sspcloud.fr/projet-hackathon-socstat/metadata/dico.csv")
```

:::


```{ojs}
//| echo: false
base = d3.csv("https://minio.lab.sspcloud.fr/projet-hackathon-socstat/metadata/dico.csv");
```


## Importer les fonds de carte

Quelques fonds de carte sont mis à disposition. Ils sont mis 
à disposition dans une archive zippée. 

::: {.panel-tabset group="language"}

## `Python` {.unnumbered .unlisted}

```{.python filename = "Télécharger les fonds de carte"}
import requests
import zipfile
import os

# URL of the .zip file to download
url = "https://minio.lab.sspcloud.fr/projet-hackathon-socstat/data/geo/shp_benin.zip"

# Send a GET request to the URL
req = requests.get(url)

# Save the .zip file locally
zip_file_path = "shp_benin.zip"
with open(zip_file_path, "wb") as file:
    file.write(req.content)

# Define the directory to extract the contents to
# You can change this to a specific path if you want
extract_to_dir = "shp_benin"

# Unzip the files
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extract_to_dir)

print(f"Files extracted to {extract_to_dir}")
```

Pour lire les données, par exemple, 
le fond de carte des communes et des forêts

```{python}
#| file: "Importer les fonds de carte"
#| filename: "Importer les fonds de carte"
import geopandas as gpd
cities_background = gpd.read_file("shp_benin/shp_benin/communes.shp")
forest_background = gpd.read_file("shp_benin/shp_benin/forêt.shp")
ax = cities_background.boundary.plot(edgecolor = "k")
forest_background.plot(ax = ax)
ax.set_axis_off()
```

## `R` {.unnumbered .unlisted}

```{.r filename="Télécharger les fonds de carte"}
url <- "https://minio.lab.sspcloud.fr/projet-hackathon-socstat/data/geo/shp_benin.zip"
download.file(url = url, destfile = "shp_benin.zip")

# Define the directory to extract the contents to
extract_to_dir <- "shp_benin"

# Check if the directory exists, if not create it
if (!dir.exists(extract_to_dir)) {
  dir.create(extract_to_dir)
}

# Unzip the files
unzip("shp_benin.zip", exdir = extract_to_dir)

library(archive)
archive_extract("shp_benin.zip", dir = "shp_benin")
```

Pour lire les données, par exemple, 
le fond de carte des communes et des forêts

```{.r filename=""}
library(sf)
library(ggplot2)

# Read the shapefiles
cities_background <- st_read("shp_benin/shp_benin/communes.shp")
forest_background <- st_read("shp_benin/shp_benin/forêt.shp")


# Plotting
ggplot() +
  geom_sf(data = cities_background, color = "black", fill = NA) +
  geom_sf(data = forest_background, fill = "green", alpha = 0.5) +
  theme_void()
```

:::


